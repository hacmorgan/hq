#!/usr/bin/env bash

##  This script is intended to be used with keybindings

function get-choice()
{
    options="$1"
    echo $options | tr ',' '\n' | dmenu -fn "Fantasque Sans Mono" -sb "#AD29C4" -f
}


function main-run ()
{
    function power-run()
    {
        local options="shut down,reboot"
        local selected_option="$( get-choice "$options" )"
        case "$selected_option" in
            "shut down")
                sudo shutdown -P now ;;
            "reboot")
                sudo reboot ;;
        esac
    }
    
    function edit-configs-run ()
    {
        local configs="zsh,i3,i3status,emacs,picom,kitty,xinit,dmenu-custom"
        local selected_config="$( get-choice "$configs" )"
        case "$selected_config" in
            "zsh")
                em ~/.zshrc ;;
            "i3")
                em ~/.config/i3/config ;;
            "i3status")
                em ~/.config/i3/status.toml ;;
            "dwm")
                em ~/src/foss/dwm/config.h ;;
            "emacs")
                em ~/.emacs.d/config.org ;;
            "picom")
                em ~/.config/picom.conf ;;
            "kitty")
                em ~/.config/kitty/kitty.conf ;;
            "sakura")
                em ~/.config/sakura/sakura.conf ;;
            "termite")
                em ~/.config/termite/config ;;
            "st")
                em ~/src/foss/st/config.h ;;
            "xinit")
                em ~/.xinitrc ;;
            "dmenu-custom")
                em ~/src/hq/scripts/dmenu-custom ;;
        esac
    }

    function screenshot-run()
    {
        local screenshot_types="select region,full screen,select region (delay),full screen (delay)"
        local selected_type="$( get-choice "$screenshot_types" )"
        case "$selected_type" in
            "select region")
                scrot -s -e 'mv $f /tmp/' ;;
            "full screen")
                scrot -e 'mv $f /tmp/' ;;
        esac
    }

    # TODO - determine appropriate values
    function keyboard-multiplier-run()
    {
        function select-delay()
        {
            local delays="150ms,250ms,500ms"
            local selected_delay="$( get-choice "$delays" | sed 's/ms//g' )"
            local current_rate=$(xset -q | grep delay | cut -d: -f3 | cut -d ' ' -f3)
            xset r rate $selected_delay $current_rate
        }
        function select-rate()
        {
            local rates="25,50,100,200"
            local selected_rate="$( get-choice "$rates" )"
            local current_delay=$(xset -q | grep delay | cut -d: -f2 | cut -d ' ' -f3)
            xset r rate $current_delay $selected_rate
        }
        
        local configurable_params="delay,rate"
        local selected_param="$( get-choice "$configurable_params" )"
        case "$selected_param" in
            "delay")
                select-delay ;;
            "rate")
                select-rate ;;
        esac
    }

    function mouse-speed-run()
    {
        function select-acceleration()
        {
            local delays="150ms,250ms,500ms"
            local selected_delay="$( get-choice "$delays" | sed 's/ms//g' )"
            local current_rate=$(xset -q | grep delay | cut -d: -f3 | cut -d ' ' -f3)
            xset r rate $selected_delay $current_rate
        }
        function select-threshold()
        {
            local rates="25,50,100,200"
            local selected_rate="$( get-choice "$rates" )"
            local current_delay=$(xset -q | grep delay | cut -d: -f2 | cut -d ' ' -f3)
            xset r rate $current_delay $selected_rate
        }
        
        local configurable_params="acceleration,threshold,restore defaults"
        local selected_param="$( get-choice "$configurable_params" )"
        case "$selected_param" in
            "acceleration")
                select-acceleration ;;
            "threshold")
                select-threshold ;;
            "restore defaults")
                xset m default
        esac
    }

    function picom-run()
    {
        local picom_options="turn on,turn off"
        local selected_option="$( get-choice "$picom_options" )"
        case "$selected_option" in
            "turn on")
                [ $(ps -aux | grep picom | wc -l) -le 1 ] && exec picom ;;
            "turn off")
                killall picom ;;
        esac
    }

    function emacs-run
    {
        local emacs_options="local,george,enzo,buffalo"
        local selected_option="$( get-choice "$emacs_options" )"
        case "$selected_option" in
            "local")
                em ;;
            "george")
                em --george ;;
            "buffalo")
                em --buffalo ;;
            "enzo")
                em --enzo ;;
        esac
    }

    function display-run
    {
        local display_options="turn off"
        local selected_option="$( get-choice "$display_options" )"
        case "$selected_option" in
            "turn off")
                xset -display :0.0 dpms force off ;;
        esac
    }

    function sdc-run
    {
        local options="all,bedside light,sound system"
        local selected_option="$( get-choice "$options" )"
        local states="on,off"
        local selected_state="$( get-choice "$states" )"
        case "$selected_state" in
            "on")
                sdc --on "$selected_option" ;;
            "off")
                sdc --off "$selected_option" ;;
        esac
    }

    
    subsetting_options="power,screenshot,emacs,display,sdc,mount shared drives,edit configs,keyboard multiplier,picom"
    subsetting="$( get-choice "$subsetting_options" )"
    echo $subsetting
    case "$subsetting" in
        "power")
            power-run ;;
        "edit configs")
            edit-configs-run ;;
        "keyboard multiplier")
            keyboard-multiplier-run ;;
        "screenshot")
            screenshot-run ;;
        "picom")
            picom-run ;;
        "emacs")
            emacs-run ;;
        "display")
            display-run ;;
        "mount shared drives")
            mount-shared-drives ;;
        "sdc")
            sdc-run ;;
    esac
    
}


main-run
