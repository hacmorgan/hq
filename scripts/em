#!/usr/bin/env bash

# A simple script to open a given file in emacs,
# and detatch the process from the parent terminal 


source $( type -p bash-std )
BASH_STD_IGNORE_UNKNOWN_ARGS=1  # until positional args implemented


function prologue
{
    cat <<EOF 

${fmt_red}em - emacsclient wrapper${fmt_normal}

${fmt_dim}Note: the filename must be the final argument. bash-std doesn't support positional arguments yet${fmt_normal}
EOF
}

function options
{
    cat <<EOF
--buffalo,-b; look for file (if any given) on buffalo
--enzo,-e; look for file (if any given) on enzo
--george,-g; look for file (if any given) on george
--sudo,-s; Open file using sudo
--terminal,-t; open file in the terminal, don't detach process from parent shell 
--via-george,-v; for remotes other than george, use george as a jump host
EOF
}

bash-std-application-init "$@" < <( options ) || die "failed"




function get_final_arg
{
    local args=( $@ )
    local num_args=${#args[@]}
    echo ${args[$(( num_args - 1 ))]}
}


function sanitize_inputs
{
    if (( options_george + options_buffalo + options_enzo > 1 )); then
        die "--george, --enzo and --buffalo are mutually exclusive"
    fi
}


function get_filename
{
    function is_local
    {
        echo $(( options_george + options_buffalo + options_enzo == 0 ))
    }
    
    local final_arg=$( get_final_arg $@ )
    local file=""
    local emacs_file_path=""
    if [[ -z "$( grep '^-' <<< $final_arg )" ]]; then file="$final_arg"; fi
    if (( options_george )); then
        emacs_file_path="/ssh:$(where-is-george)"
    elif (( options_buffalo )); then
        emacs_file_path="/ssh"
        if (( options_via_george )); then
            emacs_file_path+=":$(where-is-george)\|ssh"
        fi
        emacs_file_path+=":buffalo"
    elif (( options_enzo )); then
        emacs_file_path="/ssh"
        if (( options_via_george )); then
            emacs_file_path+=":$(where-is-george)\|ssh"
        fi
        emacs_file_path+=":enzo"
    fi
    if (( options_sudo )); then
        if (( $(is_local) )); then
            emacs_file_path+="/"
        else
            emacs_file_path+="|"
        fi
        emacs_file_path+="sudo::"
    elif (( ! $(is_local) )); then
        emacs_file_path+=":"
    fi
    emacs_file_path+="$file"
    echo $emacs_file_path
}




# todo: see if this still breaks when given 2 files with "$@" instead of $@
sanitize_inputs $@  

file="$( get_filename $@ )"
command="emacsclient -a '' -c $file"
if (( options_terminal )); then
    command+=" -nw"
else
    command+=" &!"
fi
eval "$command"
