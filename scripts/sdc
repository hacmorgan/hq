#!/usr/bin/env python3


import argparse
import sys
import pyHS100


IP = str


def getArgs():
    parser = argparse.ArgumentParser()
    parser.add_argument( "--list-devices",
                         "-l",
                         action="store_true",
                         help="List all devices on local network" )
    parser.add_argument( "--off",
                         "-0",
                         type=str,
                         action='append',
                         nargs='+',
                         help="Turn off device(s) at given IP address(es)" )
    parser.add_argument( "--on",
                         "-1",
                         type=str,
                         action='append',
                         nargs='+',
                         help="Turn on device(s) at given IP address(es)" )
    parser.add_argument( "--verbose",
                         "-v",
                         action="store_true",
                         help="More output"   )
    return parser.parse_args()


def discoverDevices() -> dict[str, pyHS100.smartdevice.SmartDevice]:
    print( "Discovery message broadcast on LAN, awaiting responses...",
           file=sys.stderr )
    return pyHS100.Discover().discover()


def listDevices( devices ) -> None:
    for ip in devices.keys():
        print( "{}: {} -> {}".format( ip,
                                      devices[ip].alias,
                                      "ON" if devices[ip].is_on else "OFF" ) )


def findIpByName( name:    str,
                  devices: dict[str, pyHS100.smartdevice.SmartDevice] ) -> IP:
    for ip in devices.keys():
        if devices[ip].alias == name:
            return ip
    return None


def main( args ):
    devices = discoverDevices()
    if args.list_devices:
        listDevices( devices )
    else:
        if args.on is not None:
            for name in args.on:
                devices[ findIpByName( name[0], devices ) ].turn_on()
        if args.off is not None:
            for name in args.off:
                devices[ findIpByName( name[0], devices ) ].turn_off()
        listDevices( devices )
    return 0


if __name__ == '__main__':
    sys.exit(main(getArgs()))
