#!/usr/bin/env bash


# Run common shell commands and routines through a dmenu interface
#
# Intended to be bound to a key combination in a window manager


source $(type -p bash-std)


function get_choice
{
    # Get user input (using dmenu) from supplied options
    #
    # Args:
    #     options: Comma-separated list of options
    #
    # Stdout:
    #     Chosen option
    options="$1"
    echo $options                       |
        tr ',' '\n'                     |
        dmenu -fn "Fantasque Sans Mono" \
              -sb "#AD29C4"             \
              -f
}


function main
{
    # Main application routine
    
    function power-run
    {
        # Shut down/reboot system
        local options="shut down,reboot"
        local selected_option="$(get_choice "$options")"
        case "$selected_option" in
            "shut down")
                sudo shutdown -P now ;;
            "reboot")
                sudo reboot ;;
        esac
    }

    function screenshot-run
    {
        # Take a screenshot using `scrot`
        
        function select-delay
        {
            # Prompt user for delay before screenshot
            #
            # Stdout:
            #     Delay period (seconds)
            local delays="3,5"
            get_choice "$delays"
        }
        
        local screenshot_types="select region,full screen,select region (delay),full screen (delay)"
        local selected_type="$(get_choice "$screenshot_types")"
        local expression='mv $f /tmp/'
        if (( BASH_STD_NOTIFY_SEND_INSTALLED )); then
            expression+='; notify-send "screenshot captured" "saved to $f"'
        fi
        case "$selected_type" in
            "select region")
                scrot -s -e "$expression" ;;
            "full screen")
                scrot -e "$expression" ;;
            "select region (delay)")
                sleep "$(select-delay)"; scrot -s -e "$expression" ;;
            "full screen (delay)")
                sleep "$(select-delay)"; scrot -e "$expression" ;;
        esac
    }

    function picom-run
    {
        # Turn compositor (`picom`) on or off
        local picom_options="turn on,turn off"
        local selected_option="$(get_choice "$picom_options")"
        case "$selected_option" in
            "turn on")
                [ $(ps -aux | grep picom | wc -l) -le 1 ] && exec picom
                if (( BASH_STD_NOTIFY_SEND_INSTALLED )); then
                    notify-send "picom turned on"
                fi ;;
            "turn off")
                killall picom
                if (( BASH_STD_NOTIFY_SEND_INSTALLED )); then
                    notify-send "picom turned off"
                fi ;;
        esac
    }

    function display-run
    {
        # Choose displays to output to
        #
        # TODO: dynamically populate options from script (e.g. `permute-displays`)
        local display_options="turn off"
        local selected_option="$(get_choice "$display_options")"
        case "$selected_option" in
            "turn off")
                xset -display :0.0 dpms force off ;;
        esac
    }

    function configure-xinput-run
    {
        # Configure xinput as desired (natural scrolling, tap-to-click, etc)
        configure-xinput
    }

    function mount-shared-drives-run
    {
        # Configure xinput as desired (natural scrolling, tap-to-click, etc)
        mount-shared-drives
    }

    function get-subsettings
    {
        # Find all defined subcommands by function name (*-run)
        #
        # Stdout:
        #     Names of defined subcommand functions without -run suffix
        declare -F |
            grep -e '-run$' |
            sed 's#declare -f \(.*\)-run#\1#' |
            tr '\n' ','
    }

    subsetting_options="$(get-subsettings)"
    subsetting="$(get_choice "$subsetting_options")"
    echo $subsetting
    eval "${subsetting}-run" ||
        notify-send --urgency=critical "$subsetting failed with exit status $?"
}


main
